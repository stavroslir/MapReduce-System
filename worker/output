This 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
world 1
This 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
test 1
Hello 1
worldThis 1
is 1
a 1
test 1
We 1
are 1
trying 1
it 1
for 1
testfrom 1
flask 1
import 1
Flask, 1
request, 1
jsonify 1
from 1
werkzeug.security 1
import 1
generate_password_hash, 1
check_password_hash 1
from 1
functools 1
import 1
wraps 1
import 1
jwt 1
import 1
datetime 1
from 1
db 1
import 1
db, 1
User 1
app 1
= 1
Flask(__name__) 1
app.config['SECRET_KEY'] 1
= 1
'we-are-super-safe' 1
app.config['SQLALCHEMY_DATABASE_URI'] 1
= 1
'sqlite:////tmp/test.db' 1
db.init_app(app) 1
def 1
token_required(f): 1
@wraps(f) 1
def 1
decorator(*args, 1
**kwargs): 1
token 1
= 1
None 1
if 1
'x-access-tokens' 1
in 1
request.headers: 1
token 1
= 1
request.headers['x-access-tokens'] 1
if 1
not 1
token: 1
return 1
jsonify({'message': 1
'a 1
valid 1
token 1
is 1
missing'}) 1
try: 1
data 1
= 1
jwt.decode(token, 1
app.config['SECRET_KEY'], 1
algorithms=["HS256"]) 1
current_user 1
= 1
User.query.filter_by(username=data['sub']).first() 1
except: 1
return 1
jsonify({'message': 1
'token 1
is 1
invalid'}) 1
return 1
f(current_user, 1
*args, 1
**kwargs) 1
return 1
decorator 1
@app.route('/login', 1
methods=['POST']) 1
def 1
login(): 1
data 1
= 1
request.get_json() 1
user 1
= 1
User.query.filter_by(username=data['username']).first() 1
if 1
not 1
user 1
or 1
not 1
check_password_hash(user.password, 1
data['password']): 1
return 1
jsonify({'message': 1
'Login 1
failed!'}) 1
token 1
= 1
jwt.encode({ 1
'sub': 1
user.username, 1
'role': 1
user.role, 1
'email': 1
user.email, 1
'iat': 1
datetime.datetime.utcnow(), 1
'exp': 1
datetime.datetime.utcnow() 1
+ 1
datetime.timedelta(minutes=30)}, 1
app.config['SECRET_KEY']) 1
return 1
jsonify({'token': 1
token}) 1
@app.route('/user', 1
methods=['POST']) 1
def 1
create_user(current_user): 1
if 1
current_user.role 1
!= 1
'admin': 1
return 1
jsonify({'message': 1
'Cannot 1
perform 1
that 1
function!'}) 1
data 1
= 1
request.get_json() 1
# 1
Check 1
if 1
a 1
user 1
with 1
the 1
given 1
username 1
already 1
exists 1
existing_user 1
= 1
User.query.filter_by(username=data['username']).first() 1
if 1
existing_user: 1
return 1
jsonify({'message': 1
'Username 1
already 1
exists!'}) 1
hashed_password 1
= 1
generate_password_hash(data['password'], 1
method='sha256') 1
new_user 1
= 1
User(username=data['username'], 1
password=hashed_password, 1
email=data['email'], 1
role=data['role']) 1
db.session.add(new_user) 1
db.session.commit() 1
return 1
jsonify({'message': 1
'New 1
user 1
created!'}) 1
@app.route('/user/<username>', 1
methods=['DELETE']) 1
@token_required 1
def 1
delete_user(current_user, 1
username): 1
if 1
current_user.role 1
!= 1
'admin': 1
return 1
jsonify({'message': 1
'Cannot 1
perform 1
that 1
function!'}) 1
user 1
= 1
User.query.filter_by(username=username).first() 1
if 1
not 1
user: 1
return 1
jsonify({'message': 1
'No 1
user 1
found!'}) 1
db.session.delete(user) 1
db.session.commit() 1
return 1
jsonify({'message': 1
'The 1
user 1
has 1
been 1
deleted!'}) 1
@app.route('/validate_token', 1
methods=['GET']) 1
def 1
validate_token(): 1
token 1
= 1
request.headers.get('x-access-tokens') 1
try: 1
data 1
= 1
jwt.decode(token, 1
app.config['SECRET_KEY'], 1
algorithms=["HS256"]) 1
except: 1
return 1
jsonify({'valid': 1
False, 1
'role': 1
None}) 1
return 1
jsonify({'valid': 1
True, 1
'role': 1
data['role']}) 1
if 1
__name__ 1
== 1
'__main__': 1
with 1
app.app_context(): 1
# 1
Add 1
this 1
line 1
db.create_all() 1
# 1
This 1
will 1
create 1
the 1
database 1
file 1
using 1
SQLAlchemy 1
hashed_password 1
= 1
generate_password_hash("adminpassword", 1
method='sha256') 1
new_user 1
= 1
User(username="admin", 1
password=hashed_password, 1
email="admin@example.com", 1
role="admin") 1
db.session.add(new_user) 1
db.session.commit() 1
app.run(host='0.0.0.0', 1
port=5000) 1
Hello 1
world 1
